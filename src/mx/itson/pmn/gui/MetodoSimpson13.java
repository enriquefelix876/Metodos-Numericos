/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.itson.pmn.gui;

import com.singularsys.jep.Jep;
import com.singularsys.jep.JepException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author enriq_000
 */
public class MetodoSimpson13 extends javax.swing.JFrame {

    /**
     * Creates new form MetodoSimpson13
     */
    
    DefaultTableModel modelo = new DefaultTableModel();
    
    public MetodoSimpson13() {
        initComponents();
        
        this.setLocationRelativeTo(null);
        modelo.addColumn("x");
        modelo.addColumn("f(x)");
        tblAlturas.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFuncion = new javax.swing.JTextField();
        txtNumero = new javax.swing.JTextField();
        txtA = new javax.swing.JTextField();
        txtB = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnMenu = new javax.swing.JButton();
        btnCalcular = new javax.swing.JButton();
        txtArea = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAlturas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(102, 102, 255));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("f(x):");

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Numero de datos:");

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Valor de a:");

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Valor de b:");

        txtB.setText(" ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Metodo de Simpson 1/3");

        btnMenu.setBackground(new java.awt.Color(102, 102, 255));
        btnMenu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnMenu.setText("Menu Principal");
        btnMenu.setBorder(null);
        btnMenu.setBorderPainted(false);
        btnMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMenu.setOpaque(false);
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        btnCalcular.setBackground(new java.awt.Color(102, 102, 255));
        btnCalcular.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCalcular.setText("Calcular");
        btnCalcular.setBorder(null);
        btnCalcular.setBorderPainted(false);
        btnCalcular.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCalcular.setOpaque(false);
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        txtArea.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtArea.setForeground(new java.awt.Color(255, 255, 255));
        txtArea.setText("AREA: ");

        tblAlturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblAlturas);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1)
                                    .addComponent(btnCalcular, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(32, 32, 32)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtA, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtNumero, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtFuncion, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtB, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                                    .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel5)
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFuncion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(txtArea)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     /**
     * Este metodo sirve para comprobar si un numero es par o impar.
     * @param x Un int con el numero a comprobar.
     * @return Un boolean segun sea el caso.
     */
    public boolean parEImpar (int x){
        
        boolean par=true;
        double y  = Double.parseDouble(String.valueOf(x));
        
        y= y/2;
        
        String numerox = String.valueOf(y);
             
        numerox=""+numerox.charAt(numerox.length()-1);
        
        y = Double.parseDouble(numerox);
        
        if (y>0) {
            par=false;
        }
        
        return par;
    }
     /**
     * Comprueba que el dato ingresado en la casilla nDatos de la tabla del 
     * metodo de Simpson 1/3 sea multiplo de 2.
     * @param x Un String que contiene el valor del dato ingresado.
     * @param j El JTextField en el que fue ingresado el dato.
     * @return Un boolean que demuestra si el valor es multiplo de 2.
     */
    public boolean comprobarMultiplo2(String x, JTextField j){
        
        boolean noMultiplo = false;
       
        if (parEImpar(Integer.parseInt(x))!= true) {
            
            JOptionPane.showMessageDialog(null,"Favor de ingresar solo multiplos"
                    + " de 2, en la casilla Numero de datos.");
            noMultiplo = true;
            j.setText(null);
        }if (x.equals("0")) {
            
            JOptionPane.showMessageDialog(null,"Favor de ingresar solo multiplos"
                    + " de 2, en la casilla Numero de datos."); 
                    noMultiplo = true;
                    j.setText(null);
        }

        
        return noMultiplo;
    }
    
    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed

        MenuPrincipal mp = new MenuPrincipal();
        mp.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_btnMenuActionPerformed

     /**
     * Se encarga de evaluar la ecuacion obtenida del metodo de Lagrange.
     * @param variable recibe la variable con la que se evaluara.
     * @param ecuacion recibe la ecuacion resultante del metodo de Lagrange.
     * @return Una variable de tipo double con el resultado de la evaluacion.
     */
    public double evaluar(double variable,String ecuacion) throws JepException{

            Jep jp = new Jep();
            jp.addVariable("x",variable);
            jp.parse(ecuacion);

            double resultado = jp.evaluateD();

            return resultado;
    }
        /**
     * Metodo utilizado para la integracion numerica por el Metodo de Simpson 1/3/
     * @param funcion La funcion dada para la resolucion del Metodo de Simpson 1/3/.
     * @param nDatos El numero de datos a obtener.
     * @param a El valor de a.
     * @param b El valor de b
     */
    public void metodoSimpson13(String funcion, int nDatos, double a, double b) throws JepException{
       
        try{
        /**
         * Declaracion de las variables utilizadas para la resolucion del Metodo.
         */
        List<Double> x = new ArrayList<>();
        double h = (b-a)/nDatos;
        x.add(a);
        List<Double> fx = new ArrayList<>();
        List<Double> impares = new ArrayList<>();
        List<Double> pares = new ArrayList<>();
        List<List> listas = new ArrayList<>();
        double integral=0;
        double termino1=0;
        double termino2=0;
        double termino3=0;
        double termino4=0;
         
        /**
         * Se obtiene el valor de todas las alturas.
         */
        for (int i = 0; i < nDatos; i++) {         
            x.add(x.get(i)+h);  
        }
        
        /**
         * Se obtiene el valor de cada altura puesta en la funcion.
         */
        for (int i = 0; i <= nDatos; i++) {
            fx.add(evaluar(x.get(i),funcion));  
        }
       
        /**
         * Se utiliza la formula general para obtener la Integral.
         */
        
        for (int i = 1; i < fx.size()-1; i++) {
            if (parEImpar(i)!=true) {
                impares.add(fx.get(i));
            }else{
                pares.add(fx.get(i));
            }   
        }
            termino1=fx.get(0);
            for (int i = 0; i < impares.size(); i++) {
                termino2+=impares.get(i);
        }
            termino2=termino2*4;
            for (int i = 0; i < pares.size(); i++) {
            termino3+=pares.get(i);
        }
            termino3=termino3*2;
            termino4=fx.get(fx.size()-1);
            
            integral = (h/3)*(termino1 + termino2 + termino3 + termino4);
            txtArea.setText(String.valueOf(integral));
        
        listas.add(x);
        listas.add(fx);

        //Se borran los datos de la tabla para realizar multiples consultas
        int filas = modelo.getRowCount();
            
            for (int i = 0; filas > i; i++) {
                
                modelo.removeRow(0);
        }
        String [] datos = new String[2];
        
        /**
         * Se agregan las alturas y los valores de f en funcion x de cada 
         * intervalo
         */
        for (int i = 0; i < x.size(); i++) {
            
            datos[0] = String.valueOf(x.get(i));
            datos[1] = String.valueOf(fx.get(i));
            
            modelo.addRow(datos);
        }
        }catch(Exception e){
        
            JOptionPane.showMessageDialog(null, "Asegurese de ingresar todos "
                + "los campos con valores númericos");
        }

    }
    
    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
    
        if (comprobarMultiplo2(txtNumero.getText(), txtNumero)) {
             
        }else{
             try {
                 
                 metodoSimpson13(txtFuncion.getText(),Integer.parseInt(txtNumero.getText()),
                         Double.parseDouble(txtA.getText()), Double.parseDouble(txtB.getText()));
                 
             } catch (JepException ex) {
                 Logger.getLogger(MetodoSimpson13.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
    }//GEN-LAST:event_btnCalcularActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAlturas;
    private javax.swing.JTextField txtA;
    private javax.swing.JLabel txtArea;
    private javax.swing.JTextField txtB;
    private javax.swing.JTextField txtFuncion;
    private javax.swing.JTextField txtNumero;
    // End of variables declaration//GEN-END:variables
}
